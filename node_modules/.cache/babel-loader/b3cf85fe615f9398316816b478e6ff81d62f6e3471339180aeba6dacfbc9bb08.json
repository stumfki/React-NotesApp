{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.codeCommand = void 0;\nvar MarkdownUtil_1 = require(\"../../util/MarkdownUtil\");\nexports.codeCommand = {\n  buttonProps: {\n    \"aria-label\": \"Insert code\"\n  },\n  execute: function (_a) {\n    var initialState = _a.initialState,\n      textApi = _a.textApi;\n    // Adjust the selection to encompass the whole word if the caret is inside one\n    var newSelectionRange = MarkdownUtil_1.selectWord({\n      text: initialState.text,\n      selection: initialState.selection\n    });\n    var state1 = textApi.setSelectionRange(newSelectionRange);\n    // when there's no breaking line\n    if (state1.selectedText.indexOf(\"\\n\") === -1) {\n      textApi.replaceSelection(\"`\" + state1.selectedText + \"`\");\n      // Adjust the selection to not contain the **\n      var selectionStart_1 = state1.selection.start + 1;\n      var selectionEnd_1 = selectionStart_1 + state1.selectedText.length;\n      textApi.setSelectionRange({\n        start: selectionStart_1,\n        end: selectionEnd_1\n      });\n      return;\n    }\n    var breaksBeforeCount = MarkdownUtil_1.getBreaksNeededForEmptyLineBefore(state1.text, state1.selection.start);\n    var breaksBefore = Array(breaksBeforeCount + 1).join(\"\\n\");\n    var breaksAfterCount = MarkdownUtil_1.getBreaksNeededForEmptyLineAfter(state1.text, state1.selection.end);\n    var breaksAfter = Array(breaksAfterCount + 1).join(\"\\n\");\n    textApi.replaceSelection(breaksBefore + \"```\\n\" + state1.selectedText + \"\\n```\" + breaksAfter);\n    var selectionStart = state1.selection.start + breaksBeforeCount + 4;\n    var selectionEnd = selectionStart + state1.selectedText.length;\n    textApi.setSelectionRange({\n      start: selectionStart,\n      end: selectionEnd\n    });\n  }\n};","map":{"version":3,"names":["Object","defineProperty","exports","value","codeCommand","MarkdownUtil_1","require","buttonProps","execute","_a","initialState","textApi","newSelectionRange","selectWord","text","selection","state1","setSelectionRange","selectedText","indexOf","replaceSelection","selectionStart_1","start","selectionEnd_1","length","end","breaksBeforeCount","getBreaksNeededForEmptyLineBefore","breaksBefore","Array","join","breaksAfterCount","getBreaksNeededForEmptyLineAfter","breaksAfter","selectionStart","selectionEnd"],"sources":["C:/Users/Din/Desktop/web/React/notesapp/node_modules/react-mde/lib/js/commands/default-commands/codeCommand.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.codeCommand = void 0;\nvar MarkdownUtil_1 = require(\"../../util/MarkdownUtil\");\nexports.codeCommand = {\n    buttonProps: { \"aria-label\": \"Insert code\" },\n    execute: function (_a) {\n        var initialState = _a.initialState, textApi = _a.textApi;\n        // Adjust the selection to encompass the whole word if the caret is inside one\n        var newSelectionRange = MarkdownUtil_1.selectWord({\n            text: initialState.text,\n            selection: initialState.selection\n        });\n        var state1 = textApi.setSelectionRange(newSelectionRange);\n        // when there's no breaking line\n        if (state1.selectedText.indexOf(\"\\n\") === -1) {\n            textApi.replaceSelection(\"`\" + state1.selectedText + \"`\");\n            // Adjust the selection to not contain the **\n            var selectionStart_1 = state1.selection.start + 1;\n            var selectionEnd_1 = selectionStart_1 + state1.selectedText.length;\n            textApi.setSelectionRange({\n                start: selectionStart_1,\n                end: selectionEnd_1\n            });\n            return;\n        }\n        var breaksBeforeCount = MarkdownUtil_1.getBreaksNeededForEmptyLineBefore(state1.text, state1.selection.start);\n        var breaksBefore = Array(breaksBeforeCount + 1).join(\"\\n\");\n        var breaksAfterCount = MarkdownUtil_1.getBreaksNeededForEmptyLineAfter(state1.text, state1.selection.end);\n        var breaksAfter = Array(breaksAfterCount + 1).join(\"\\n\");\n        textApi.replaceSelection(breaksBefore + \"```\\n\" + state1.selectedText + \"\\n```\" + breaksAfter);\n        var selectionStart = state1.selection.start + breaksBeforeCount + 4;\n        var selectionEnd = selectionStart + state1.selectedText.length;\n        textApi.setSelectionRange({\n            start: selectionStart,\n            end: selectionEnd\n        });\n    }\n};\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,WAAW,GAAG,KAAK,CAAC;AAC5B,IAAIC,cAAc,GAAGC,OAAO,CAAC,yBAAyB,CAAC;AACvDJ,OAAO,CAACE,WAAW,GAAG;EAClBG,WAAW,EAAE;IAAE,YAAY,EAAE;EAAc,CAAC;EAC5CC,OAAO,EAAE,UAAUC,EAAE,EAAE;IACnB,IAAIC,YAAY,GAAGD,EAAE,CAACC,YAAY;MAAEC,OAAO,GAAGF,EAAE,CAACE,OAAO;IACxD;IACA,IAAIC,iBAAiB,GAAGP,cAAc,CAACQ,UAAU,CAAC;MAC9CC,IAAI,EAAEJ,YAAY,CAACI,IAAI;MACvBC,SAAS,EAAEL,YAAY,CAACK;IAC5B,CAAC,CAAC;IACF,IAAIC,MAAM,GAAGL,OAAO,CAACM,iBAAiB,CAACL,iBAAiB,CAAC;IACzD;IACA,IAAII,MAAM,CAACE,YAAY,CAACC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE;MAC1CR,OAAO,CAACS,gBAAgB,CAAC,GAAG,GAAGJ,MAAM,CAACE,YAAY,GAAG,GAAG,CAAC;MACzD;MACA,IAAIG,gBAAgB,GAAGL,MAAM,CAACD,SAAS,CAACO,KAAK,GAAG,CAAC;MACjD,IAAIC,cAAc,GAAGF,gBAAgB,GAAGL,MAAM,CAACE,YAAY,CAACM,MAAM;MAClEb,OAAO,CAACM,iBAAiB,CAAC;QACtBK,KAAK,EAAED,gBAAgB;QACvBI,GAAG,EAAEF;MACT,CAAC,CAAC;MACF;IACJ;IACA,IAAIG,iBAAiB,GAAGrB,cAAc,CAACsB,iCAAiC,CAACX,MAAM,CAACF,IAAI,EAAEE,MAAM,CAACD,SAAS,CAACO,KAAK,CAAC;IAC7G,IAAIM,YAAY,GAAGC,KAAK,CAACH,iBAAiB,GAAG,CAAC,CAAC,CAACI,IAAI,CAAC,IAAI,CAAC;IAC1D,IAAIC,gBAAgB,GAAG1B,cAAc,CAAC2B,gCAAgC,CAAChB,MAAM,CAACF,IAAI,EAAEE,MAAM,CAACD,SAAS,CAACU,GAAG,CAAC;IACzG,IAAIQ,WAAW,GAAGJ,KAAK,CAACE,gBAAgB,GAAG,CAAC,CAAC,CAACD,IAAI,CAAC,IAAI,CAAC;IACxDnB,OAAO,CAACS,gBAAgB,CAACQ,YAAY,GAAG,OAAO,GAAGZ,MAAM,CAACE,YAAY,GAAG,OAAO,GAAGe,WAAW,CAAC;IAC9F,IAAIC,cAAc,GAAGlB,MAAM,CAACD,SAAS,CAACO,KAAK,GAAGI,iBAAiB,GAAG,CAAC;IACnE,IAAIS,YAAY,GAAGD,cAAc,GAAGlB,MAAM,CAACE,YAAY,CAACM,MAAM;IAC9Db,OAAO,CAACM,iBAAiB,CAAC;MACtBK,KAAK,EAAEY,cAAc;MACrBT,GAAG,EAAEU;IACT,CAAC,CAAC;EACN;AACJ,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}
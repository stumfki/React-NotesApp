{"ast":null,"code":"\"use strict\";\n\n/*!\n * The MIT License\n   Copyright (c) 2018 Dmitriy Kubyshkin\n   Copied from https://github.com/grassator/insert-text-at-cursor\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.insertText = void 0;\n/**\n * Inserts the given text at the cursor. If the element contains a selection, the selection\n * will be replaced by the text.\n */\nfunction insertText(input, text) {\n  // Most of the used APIs only work with the field selected\n  input.focus();\n  // IE 8-10\n  if (document.selection) {\n    var ieRange = document.selection.createRange();\n    ieRange.text = text;\n    // Move cursor after the inserted text\n    ieRange.collapse(false /* to the end */);\n    ieRange.select();\n    return;\n  }\n  // Webkit + Edge\n  var isSuccess = document.execCommand(\"insertText\", false, text);\n  if (!isSuccess) {\n    var start = input.selectionStart;\n    var end = input.selectionEnd;\n    // Firefox (non-standard method)\n    if (typeof input.setRangeText === \"function\") {\n      input.setRangeText(text);\n    } else {\n      if (canManipulateViaTextNodes(input)) {\n        var textNode = document.createTextNode(text);\n        var node = input.firstChild;\n        // If textarea is empty, just insert the text\n        if (!node) {\n          input.appendChild(textNode);\n        } else {\n          // Otherwise we need to find a nodes for start and end\n          var offset = 0;\n          var startNode = null;\n          var endNode = null;\n          // To make a change we just need a Range, not a Selection\n          var range = document.createRange();\n          while (node && (startNode === null || endNode === null)) {\n            var nodeLength = node.nodeValue.length;\n            // if start of the selection falls into current node\n            if (start >= offset && start <= offset + nodeLength) {\n              range.setStart(startNode = node, start - offset);\n            }\n            // if end of the selection falls into current node\n            if (end >= offset && end <= offset + nodeLength) {\n              range.setEnd(endNode = node, end - offset);\n            }\n            offset += nodeLength;\n            node = node.nextSibling;\n          }\n          // If there is some text selected, remove it as we should replace it\n          if (start !== end) {\n            range.deleteContents();\n          }\n          // Finally insert a new node. The browser will automatically\n          // split start and end nodes into two if necessary\n          range.insertNode(textNode);\n        }\n      } else {\n        // For the text input the only way is to replace the whole value :(\n        var value = input.value;\n        input.value = value.slice(0, start) + text + value.slice(end);\n      }\n    }\n    // Correct the cursor position to be at the end of the insertion\n    input.setSelectionRange(start + text.length, start + text.length);\n    // Notify any possible listeners of the change\n    var e = document.createEvent(\"UIEvent\");\n    e.initEvent(\"input\", true, false);\n    input.dispatchEvent(e);\n  }\n}\nexports.insertText = insertText;\nfunction canManipulateViaTextNodes(input) {\n  if (input.nodeName !== \"TEXTAREA\") {\n    return false;\n  }\n  var browserSupportsTextareaTextNodes;\n  if (typeof browserSupportsTextareaTextNodes === \"undefined\") {\n    var textarea = document.createElement(\"textarea\");\n    textarea.value = \"1\";\n    browserSupportsTextareaTextNodes = !!textarea.firstChild;\n  }\n  return browserSupportsTextareaTextNodes;\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","insertText","input","text","focus","document","selection","ieRange","createRange","collapse","select","isSuccess","execCommand","start","selectionStart","end","selectionEnd","setRangeText","canManipulateViaTextNodes","textNode","createTextNode","node","firstChild","appendChild","offset","startNode","endNode","range","nodeLength","nodeValue","length","setStart","setEnd","nextSibling","deleteContents","insertNode","slice","setSelectionRange","e","createEvent","initEvent","dispatchEvent","nodeName","browserSupportsTextareaTextNodes","textarea","createElement"],"sources":["C:/Users/Din/Desktop/web/React/notesapp/node_modules/react-mde/lib/js/util/InsertTextAtPosition.js"],"sourcesContent":["\"use strict\";\n/*!\n * The MIT License\n   Copyright (c) 2018 Dmitriy Kubyshkin\n   Copied from https://github.com/grassator/insert-text-at-cursor\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.insertText = void 0;\n/**\n * Inserts the given text at the cursor. If the element contains a selection, the selection\n * will be replaced by the text.\n */\nfunction insertText(input, text) {\n    // Most of the used APIs only work with the field selected\n    input.focus();\n    // IE 8-10\n    if (document.selection) {\n        var ieRange = document.selection.createRange();\n        ieRange.text = text;\n        // Move cursor after the inserted text\n        ieRange.collapse(false /* to the end */);\n        ieRange.select();\n        return;\n    }\n    // Webkit + Edge\n    var isSuccess = document.execCommand(\"insertText\", false, text);\n    if (!isSuccess) {\n        var start = input.selectionStart;\n        var end = input.selectionEnd;\n        // Firefox (non-standard method)\n        if (typeof input.setRangeText === \"function\") {\n            input.setRangeText(text);\n        }\n        else {\n            if (canManipulateViaTextNodes(input)) {\n                var textNode = document.createTextNode(text);\n                var node = input.firstChild;\n                // If textarea is empty, just insert the text\n                if (!node) {\n                    input.appendChild(textNode);\n                }\n                else {\n                    // Otherwise we need to find a nodes for start and end\n                    var offset = 0;\n                    var startNode = null;\n                    var endNode = null;\n                    // To make a change we just need a Range, not a Selection\n                    var range = document.createRange();\n                    while (node && (startNode === null || endNode === null)) {\n                        var nodeLength = node.nodeValue.length;\n                        // if start of the selection falls into current node\n                        if (start >= offset && start <= offset + nodeLength) {\n                            range.setStart((startNode = node), start - offset);\n                        }\n                        // if end of the selection falls into current node\n                        if (end >= offset && end <= offset + nodeLength) {\n                            range.setEnd((endNode = node), end - offset);\n                        }\n                        offset += nodeLength;\n                        node = node.nextSibling;\n                    }\n                    // If there is some text selected, remove it as we should replace it\n                    if (start !== end) {\n                        range.deleteContents();\n                    }\n                    // Finally insert a new node. The browser will automatically\n                    // split start and end nodes into two if necessary\n                    range.insertNode(textNode);\n                }\n            }\n            else {\n                // For the text input the only way is to replace the whole value :(\n                var value = input.value;\n                input.value = value.slice(0, start) + text + value.slice(end);\n            }\n        }\n        // Correct the cursor position to be at the end of the insertion\n        input.setSelectionRange(start + text.length, start + text.length);\n        // Notify any possible listeners of the change\n        var e = document.createEvent(\"UIEvent\");\n        e.initEvent(\"input\", true, false);\n        input.dispatchEvent(e);\n    }\n}\nexports.insertText = insertText;\nfunction canManipulateViaTextNodes(input) {\n    if (input.nodeName !== \"TEXTAREA\") {\n        return false;\n    }\n    var browserSupportsTextareaTextNodes;\n    if (typeof browserSupportsTextareaTextNodes === \"undefined\") {\n        var textarea = document.createElement(\"textarea\");\n        textarea.value = \"1\";\n        browserSupportsTextareaTextNodes = !!textarea.firstChild;\n    }\n    return browserSupportsTextareaTextNodes;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}
{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.italicCommand = void 0;\nvar MarkdownUtil_1 = require(\"../../util/MarkdownUtil\");\nexports.italicCommand = {\n  buttonProps: {\n    \"aria-label\": \"Add italic text\"\n  },\n  execute: function (_a) {\n    var initialState = _a.initialState,\n      textApi = _a.textApi;\n    // Adjust the selection to encompass the whole word if the caret is inside one\n    var newSelectionRange = MarkdownUtil_1.selectWord({\n      text: initialState.text,\n      selection: initialState.selection\n    });\n    var state1 = textApi.setSelectionRange(newSelectionRange);\n    // Replaces the current selection with the italic mark up\n    var state2 = textApi.replaceSelection(\"*\" + state1.selectedText + \"*\");\n    // Adjust the selection to not contain the *\n    textApi.setSelectionRange({\n      start: state2.selection.end - 1 - state1.selectedText.length,\n      end: state2.selection.end - 1\n    });\n  },\n  handleKeyCommand: function (e) {\n    return (e.ctrlKey || e.metaKey) && e.key == \"i\";\n  }\n};","map":{"version":3,"names":["Object","defineProperty","exports","value","italicCommand","MarkdownUtil_1","require","buttonProps","execute","_a","initialState","textApi","newSelectionRange","selectWord","text","selection","state1","setSelectionRange","state2","replaceSelection","selectedText","start","end","length","handleKeyCommand","e","ctrlKey","metaKey","key"],"sources":["C:/Users/Din/Desktop/web/React/notesapp/node_modules/react-mde/lib/js/commands/default-commands/italicCommand.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.italicCommand = void 0;\nvar MarkdownUtil_1 = require(\"../../util/MarkdownUtil\");\nexports.italicCommand = {\n    buttonProps: { \"aria-label\": \"Add italic text\" },\n    execute: function (_a) {\n        var initialState = _a.initialState, textApi = _a.textApi;\n        // Adjust the selection to encompass the whole word if the caret is inside one\n        var newSelectionRange = MarkdownUtil_1.selectWord({\n            text: initialState.text,\n            selection: initialState.selection\n        });\n        var state1 = textApi.setSelectionRange(newSelectionRange);\n        // Replaces the current selection with the italic mark up\n        var state2 = textApi.replaceSelection(\"*\" + state1.selectedText + \"*\");\n        // Adjust the selection to not contain the *\n        textApi.setSelectionRange({\n            start: state2.selection.end - 1 - state1.selectedText.length,\n            end: state2.selection.end - 1\n        });\n    },\n    handleKeyCommand: function (e) { return (e.ctrlKey || e.metaKey) && e.key == \"i\"; }\n};\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,aAAa,GAAG,KAAK,CAAC;AAC9B,IAAIC,cAAc,GAAGC,OAAO,CAAC,yBAAyB,CAAC;AACvDJ,OAAO,CAACE,aAAa,GAAG;EACpBG,WAAW,EAAE;IAAE,YAAY,EAAE;EAAkB,CAAC;EAChDC,OAAO,EAAE,UAAUC,EAAE,EAAE;IACnB,IAAIC,YAAY,GAAGD,EAAE,CAACC,YAAY;MAAEC,OAAO,GAAGF,EAAE,CAACE,OAAO;IACxD;IACA,IAAIC,iBAAiB,GAAGP,cAAc,CAACQ,UAAU,CAAC;MAC9CC,IAAI,EAAEJ,YAAY,CAACI,IAAI;MACvBC,SAAS,EAAEL,YAAY,CAACK;IAC5B,CAAC,CAAC;IACF,IAAIC,MAAM,GAAGL,OAAO,CAACM,iBAAiB,CAACL,iBAAiB,CAAC;IACzD;IACA,IAAIM,MAAM,GAAGP,OAAO,CAACQ,gBAAgB,CAAC,GAAG,GAAGH,MAAM,CAACI,YAAY,GAAG,GAAG,CAAC;IACtE;IACAT,OAAO,CAACM,iBAAiB,CAAC;MACtBI,KAAK,EAAEH,MAAM,CAACH,SAAS,CAACO,GAAG,GAAG,CAAC,GAAGN,MAAM,CAACI,YAAY,CAACG,MAAM;MAC5DD,GAAG,EAAEJ,MAAM,CAACH,SAAS,CAACO,GAAG,GAAG;IAChC,CAAC,CAAC;EACN,CAAC;EACDE,gBAAgB,EAAE,UAAUC,CAAC,EAAE;IAAE,OAAO,CAACA,CAAC,CAACC,OAAO,IAAID,CAAC,CAACE,OAAO,KAAKF,CAAC,CAACG,GAAG,IAAI,GAAG;EAAE;AACtF,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}
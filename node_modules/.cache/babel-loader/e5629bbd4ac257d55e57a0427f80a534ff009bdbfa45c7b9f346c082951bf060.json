{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.checkedListCommand = exports.orderedListCommand = exports.unorderedListCommand = exports.makeList = exports.insertBeforeEachLine = void 0;\nvar MarkdownUtil_1 = require(\"../../util/MarkdownUtil\");\n/**\n * Inserts insertionString before each line\n */\nfunction insertBeforeEachLine(selectedText, insertBefore) {\n  var lines = selectedText.split(/\\n/);\n  var insertionLength = 0;\n  var modifiedText = lines.map(function (item, index) {\n    if (typeof insertBefore === \"string\") {\n      insertionLength += insertBefore.length;\n      return insertBefore + item;\n    } else if (typeof insertBefore === \"function\") {\n      var insertionResult = insertBefore(item, index);\n      insertionLength += insertionResult.length;\n      return insertBefore(item, index) + item;\n    }\n    throw Error(\"insertion is expected to be either a string or a function\");\n  }).join(\"\\n\");\n  return {\n    modifiedText: modifiedText,\n    insertionLength: insertionLength\n  };\n}\nexports.insertBeforeEachLine = insertBeforeEachLine;\nvar makeList = function (state0, api, insertBefore) {\n  // Adjust the selection to encompass the whole word if the caret is inside one\n  var newSelectionRange = MarkdownUtil_1.selectWord({\n    text: state0.text,\n    selection: state0.selection\n  });\n  var state1 = api.setSelectionRange(newSelectionRange);\n  var breaksBeforeCount = MarkdownUtil_1.getBreaksNeededForEmptyLineBefore(state1.text, state1.selection.start);\n  var breaksBefore = Array(breaksBeforeCount + 1).join(\"\\n\");\n  var breaksAfterCount = MarkdownUtil_1.getBreaksNeededForEmptyLineAfter(state1.text, state1.selection.end);\n  var breaksAfter = Array(breaksAfterCount + 1).join(\"\\n\");\n  var modifiedText = insertBeforeEachLine(state1.selectedText, insertBefore);\n  api.replaceSelection(\"\" + breaksBefore + modifiedText.modifiedText + breaksAfter);\n  // Specifically when the text has only one line, we can exclude the \"- \", for example, from the selection\n  var oneLinerOffset = state1.selectedText.indexOf(\"\\n\") === -1 ? modifiedText.insertionLength : 0;\n  var selectionStart = state1.selection.start + breaksBeforeCount + oneLinerOffset;\n  var selectionEnd = selectionStart + modifiedText.modifiedText.length - oneLinerOffset;\n  // Adjust the selection to not contain the **\n  api.setSelectionRange({\n    start: selectionStart,\n    end: selectionEnd\n  });\n};\nexports.makeList = makeList;\nexports.unorderedListCommand = {\n  buttonProps: {\n    \"aria-label\": \"Add unordered list\"\n  },\n  execute: function (_a) {\n    var initialState = _a.initialState,\n      textApi = _a.textApi;\n    exports.makeList(initialState, textApi, \"- \");\n  }\n};\nexports.orderedListCommand = {\n  buttonProps: {\n    \"aria-label\": \"Add ordered list\"\n  },\n  execute: function (_a) {\n    var initialState = _a.initialState,\n      textApi = _a.textApi;\n    exports.makeList(initialState, textApi, function (item, index) {\n      return index + 1 + \". \";\n    });\n  }\n};\nexports.checkedListCommand = {\n  buttonProps: {\n    \"aria-label\": \"Add checked list\"\n  },\n  execute: function (_a) {\n    var initialState = _a.initialState,\n      textApi = _a.textApi;\n    exports.makeList(initialState, textApi, function (item, index) {\n      return \"- [ ] \";\n    });\n  }\n};","map":{"version":3,"names":["Object","defineProperty","exports","value","checkedListCommand","orderedListCommand","unorderedListCommand","makeList","insertBeforeEachLine","MarkdownUtil_1","require","selectedText","insertBefore","lines","split","insertionLength","modifiedText","map","item","index","length","insertionResult","Error","join","state0","api","newSelectionRange","selectWord","text","selection","state1","setSelectionRange","breaksBeforeCount","getBreaksNeededForEmptyLineBefore","start","breaksBefore","Array","breaksAfterCount","getBreaksNeededForEmptyLineAfter","end","breaksAfter","replaceSelection","oneLinerOffset","indexOf","selectionStart","selectionEnd","buttonProps","execute","_a","initialState","textApi"],"sources":["C:/Users/Din/Desktop/web/React/notesapp/node_modules/react-mde/lib/js/commands/default-commands/listCommands.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.checkedListCommand = exports.orderedListCommand = exports.unorderedListCommand = exports.makeList = exports.insertBeforeEachLine = void 0;\nvar MarkdownUtil_1 = require(\"../../util/MarkdownUtil\");\n/**\n * Inserts insertionString before each line\n */\nfunction insertBeforeEachLine(selectedText, insertBefore) {\n    var lines = selectedText.split(/\\n/);\n    var insertionLength = 0;\n    var modifiedText = lines\n        .map(function (item, index) {\n        if (typeof insertBefore === \"string\") {\n            insertionLength += insertBefore.length;\n            return insertBefore + item;\n        }\n        else if (typeof insertBefore === \"function\") {\n            var insertionResult = insertBefore(item, index);\n            insertionLength += insertionResult.length;\n            return insertBefore(item, index) + item;\n        }\n        throw Error(\"insertion is expected to be either a string or a function\");\n    })\n        .join(\"\\n\");\n    return { modifiedText: modifiedText, insertionLength: insertionLength };\n}\nexports.insertBeforeEachLine = insertBeforeEachLine;\nvar makeList = function (state0, api, insertBefore) {\n    // Adjust the selection to encompass the whole word if the caret is inside one\n    var newSelectionRange = MarkdownUtil_1.selectWord({\n        text: state0.text,\n        selection: state0.selection\n    });\n    var state1 = api.setSelectionRange(newSelectionRange);\n    var breaksBeforeCount = MarkdownUtil_1.getBreaksNeededForEmptyLineBefore(state1.text, state1.selection.start);\n    var breaksBefore = Array(breaksBeforeCount + 1).join(\"\\n\");\n    var breaksAfterCount = MarkdownUtil_1.getBreaksNeededForEmptyLineAfter(state1.text, state1.selection.end);\n    var breaksAfter = Array(breaksAfterCount + 1).join(\"\\n\");\n    var modifiedText = insertBeforeEachLine(state1.selectedText, insertBefore);\n    api.replaceSelection(\"\" + breaksBefore + modifiedText.modifiedText + breaksAfter);\n    // Specifically when the text has only one line, we can exclude the \"- \", for example, from the selection\n    var oneLinerOffset = state1.selectedText.indexOf(\"\\n\") === -1 ? modifiedText.insertionLength : 0;\n    var selectionStart = state1.selection.start + breaksBeforeCount + oneLinerOffset;\n    var selectionEnd = selectionStart + modifiedText.modifiedText.length - oneLinerOffset;\n    // Adjust the selection to not contain the **\n    api.setSelectionRange({\n        start: selectionStart,\n        end: selectionEnd\n    });\n};\nexports.makeList = makeList;\nexports.unorderedListCommand = {\n    buttonProps: { \"aria-label\": \"Add unordered list\" },\n    execute: function (_a) {\n        var initialState = _a.initialState, textApi = _a.textApi;\n        exports.makeList(initialState, textApi, \"- \");\n    }\n};\nexports.orderedListCommand = {\n    buttonProps: { \"aria-label\": \"Add ordered list\" },\n    execute: function (_a) {\n        var initialState = _a.initialState, textApi = _a.textApi;\n        exports.makeList(initialState, textApi, function (item, index) { return index + 1 + \". \"; });\n    }\n};\nexports.checkedListCommand = {\n    buttonProps: { \"aria-label\": \"Add checked list\" },\n    execute: function (_a) {\n        var initialState = _a.initialState, textApi = _a.textApi;\n        exports.makeList(initialState, textApi, function (item, index) { return \"- [ ] \"; });\n    }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}
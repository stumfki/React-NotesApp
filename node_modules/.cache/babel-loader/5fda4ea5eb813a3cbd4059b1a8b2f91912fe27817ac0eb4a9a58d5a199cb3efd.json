{"ast":null,"code":"\"use strict\";\n\n/* jshint browser: true */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getCaretCoordinates = void 0;\n// We'll copy the properties below into the mirror div.\n// Note that some browsers, such as Firefox, do not concatenate properties\n// into their shorthand (e.g. padding-top, padding-bottom etc. -> padding),\n// so we have to list every single property explicitly.\nvar properties = [\"direction\", \"boxSizing\", \"width\", \"height\", \"overflowX\", \"overflowY\", \"borderTopWidth\", \"borderRightWidth\", \"borderBottomWidth\", \"borderLeftWidth\", \"borderStyle\", \"paddingTop\", \"paddingRight\", \"paddingBottom\", \"paddingLeft\",\n// https://developer.mozilla.org/en-US/docs/Web/CSS/font\n\"fontStyle\", \"fontVariant\", \"fontWeight\", \"fontStretch\", \"fontSize\", \"fontSizeAdjust\", \"lineHeight\", \"fontFamily\", \"textAlign\", \"textTransform\", \"textIndent\", \"textDecoration\", \"letterSpacing\", \"wordSpacing\", \"tabSize\", \"MozTabSize\"];\nvar isBrowser = typeof window !== \"undefined\";\nvar isFirefox = isBrowser && window.mozInnerScreenX != null;\nfunction getCaretCoordinates(element, append) {\n  if (!isBrowser) {\n    throw new Error(\"getCaretCoordinates should only be called in a browser\");\n  }\n  // The mirror div will replicate the textarea's style\n  var div = document.createElement(\"div\");\n  div.id = \"input-textarea-caret-position-mirror-div\";\n  document.body.appendChild(div);\n  var style = div.style;\n  var computed = window.getComputedStyle ? window.getComputedStyle(element) : element.currentStyle; // currentStyle for IE < 9\n  // Default textarea styles\n  style.whiteSpace = \"pre-wrap\";\n  style.wordWrap = \"break-word\"; // only for textarea-s\n  // Position off-screen\n  style.position = \"absolute\"; // required to return coordinates properly\n  style.visibility = \"hidden\"; // not 'display: none' because we want rendering\n  // Transfer the element's properties to the div\n  properties.forEach(function (prop) {\n    style[prop] = computed[prop];\n  });\n  if (isFirefox) {\n    // Firefox lies about the overflow property for textareas: https://bugzilla.mozilla.org/show_bug.cgi?id=984275\n    if (element.scrollHeight > parseInt(computed.height)) style.overflowY = \"scroll\";\n  } else {\n    style.overflow = \"hidden\"; // for Chrome to not render a scrollbar; IE keeps overflowY = 'scroll'\n  }\n\n  div.textContent = element.value.substring(0, element.selectionStart);\n  if (append) {\n    div.textContent += append;\n  }\n  var span = document.createElement(\"span\");\n  // Wrapping must be replicated *exactly*, including when a long word gets\n  // onto the next line, with whitespace at the end of the line before (#7).\n  // The  *only* reliable way to do that is to copy the *entire* rest of the\n  // textarea's content into the <span> created at the caret position.\n  // For inputs, just '.' would be enough, but no need to bother.\n  span.textContent = element.value.substring(element.selectionEnd) || \".\"; // || because a completely empty faux span doesn't render at all\n  div.appendChild(span);\n  var coordinates = {\n    top: span.offsetTop + parseInt(computed[\"borderTopWidth\"]),\n    left: span.offsetLeft + parseInt(computed[\"borderLeftWidth\"]),\n    lineHeight: parseInt(computed[\"lineHeight\"])\n  };\n  document.body.removeChild(div);\n  return coordinates;\n}\nexports.getCaretCoordinates = getCaretCoordinates;","map":{"version":3,"names":["Object","defineProperty","exports","value","getCaretCoordinates","properties","isBrowser","window","isFirefox","mozInnerScreenX","element","append","Error","div","document","createElement","id","body","appendChild","style","computed","getComputedStyle","currentStyle","whiteSpace","wordWrap","position","visibility","forEach","prop","scrollHeight","parseInt","height","overflowY","overflow","textContent","substring","selectionStart","span","selectionEnd","coordinates","top","offsetTop","left","offsetLeft","lineHeight","removeChild"],"sources":["C:/Users/Din/Desktop/web/React/notesapp/node_modules/react-mde/lib/js/util/TextAreaCaretPosition.js"],"sourcesContent":["\"use strict\";\n/* jshint browser: true */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getCaretCoordinates = void 0;\n// We'll copy the properties below into the mirror div.\n// Note that some browsers, such as Firefox, do not concatenate properties\n// into their shorthand (e.g. padding-top, padding-bottom etc. -> padding),\n// so we have to list every single property explicitly.\nvar properties = [\n    \"direction\",\n    \"boxSizing\",\n    \"width\",\n    \"height\",\n    \"overflowX\",\n    \"overflowY\",\n    \"borderTopWidth\",\n    \"borderRightWidth\",\n    \"borderBottomWidth\",\n    \"borderLeftWidth\",\n    \"borderStyle\",\n    \"paddingTop\",\n    \"paddingRight\",\n    \"paddingBottom\",\n    \"paddingLeft\",\n    // https://developer.mozilla.org/en-US/docs/Web/CSS/font\n    \"fontStyle\",\n    \"fontVariant\",\n    \"fontWeight\",\n    \"fontStretch\",\n    \"fontSize\",\n    \"fontSizeAdjust\",\n    \"lineHeight\",\n    \"fontFamily\",\n    \"textAlign\",\n    \"textTransform\",\n    \"textIndent\",\n    \"textDecoration\",\n    \"letterSpacing\",\n    \"wordSpacing\",\n    \"tabSize\",\n    \"MozTabSize\"\n];\nvar isBrowser = typeof window !== \"undefined\";\nvar isFirefox = isBrowser && window.mozInnerScreenX != null;\nfunction getCaretCoordinates(element, append) {\n    if (!isBrowser) {\n        throw new Error(\"getCaretCoordinates should only be called in a browser\");\n    }\n    // The mirror div will replicate the textarea's style\n    var div = document.createElement(\"div\");\n    div.id = \"input-textarea-caret-position-mirror-div\";\n    document.body.appendChild(div);\n    var style = div.style;\n    var computed = window.getComputedStyle\n        ? window.getComputedStyle(element)\n        : element.currentStyle; // currentStyle for IE < 9\n    // Default textarea styles\n    style.whiteSpace = \"pre-wrap\";\n    style.wordWrap = \"break-word\"; // only for textarea-s\n    // Position off-screen\n    style.position = \"absolute\"; // required to return coordinates properly\n    style.visibility = \"hidden\"; // not 'display: none' because we want rendering\n    // Transfer the element's properties to the div\n    properties.forEach(function (prop) {\n        style[prop] = computed[prop];\n    });\n    if (isFirefox) {\n        // Firefox lies about the overflow property for textareas: https://bugzilla.mozilla.org/show_bug.cgi?id=984275\n        if (element.scrollHeight > parseInt(computed.height))\n            style.overflowY = \"scroll\";\n    }\n    else {\n        style.overflow = \"hidden\"; // for Chrome to not render a scrollbar; IE keeps overflowY = 'scroll'\n    }\n    div.textContent = element.value.substring(0, element.selectionStart);\n    if (append) {\n        div.textContent += append;\n    }\n    var span = document.createElement(\"span\");\n    // Wrapping must be replicated *exactly*, including when a long word gets\n    // onto the next line, with whitespace at the end of the line before (#7).\n    // The  *only* reliable way to do that is to copy the *entire* rest of the\n    // textarea's content into the <span> created at the caret position.\n    // For inputs, just '.' would be enough, but no need to bother.\n    span.textContent = element.value.substring(element.selectionEnd) || \".\"; // || because a completely empty faux span doesn't render at all\n    div.appendChild(span);\n    var coordinates = {\n        top: span.offsetTop + parseInt(computed[\"borderTopWidth\"]),\n        left: span.offsetLeft + parseInt(computed[\"borderLeftWidth\"]),\n        lineHeight: parseInt(computed[\"lineHeight\"])\n    };\n    document.body.removeChild(div);\n    return coordinates;\n}\nexports.getCaretCoordinates = getCaretCoordinates;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}